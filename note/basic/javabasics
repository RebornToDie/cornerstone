1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？  
Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。

2.“static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？  
  “static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。
  Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。

3.是否可以在static环境中访问非static变量？  
static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。

4.Java支持的数据类型有哪些？什么是自动拆装箱？  
Java语言支持的8中基本数据类型是：
byte short int long float double boolean char  
自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。

5.Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?  
方法的重写Overriding和重载Overloading是Java多态性的不同表现。重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写(Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。

6.Java支持多继承么？  
不支持，Java不支持多继承。每个类都只能继承一个类，但是可以实现多个接口。

7.接口和抽象类的区别是什么？
Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：
* 接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。
* 类可以实现很多个接口，但是只能继承一个抽象类
* 类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。
* 抽象类可以在不提供接口方法实现的情况下实现接口。
* Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。
* Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。
* 接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。
也可以参考JDK8中抽象类和接口的区别

8.什么是值传递和引用传递？  
对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。
对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映到所有的对象上。

9.创建线程有几种不同的方式？你喜欢哪一种？为什么？
有三种方式可以用来创建线程：
* 继承Thread类
* 实现Runnable接口
* 应用程序可以使用Executor框架来创建线程池  

 实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。
 
10.同步方法和同步代码块的区别是什么？  
在Java语言中，每一个对象有一把锁。线程可以使用synchronized关键字来获取对象上的锁。synchronized关键字可应用在方法级别(粗粒度锁：这里的锁对象可以是This)或者是代码块级别(细粒度锁：这里的锁对象就是任意对象)。

11.什么是死锁(deadlock)？  
两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是两个进程都陷入了无限的等待中。  
代码表示:
```                     
public class DieLockDemo {
    public static void main(String[] args) throws InterruptedException {
        DieLock dl1 = new DieLock(true);
        DieLock dl2 = new DieLock(false);

        dl1.start();
        //Thread.sleep(1000);
        dl2.start();
    }
}
//理想状态下dl1线程为true从if执行先打出"if objA"然后再接着打出"if objB"之后释放A、B的锁对象，
// 之后dl2线程执行else语句打出"else objB"，"else objA"。
// 非理想状态下dl1先打出"if objA"，之后线程dl2执行打出"else objB"，
// 然后1、2线程的锁对象A和B都处于被锁的状态，两个线程争夺锁对象发生死锁现象。
class DieLock extends Thread {
    private boolean flag;
    public DieLock(boolean flag) {
        this.flag = flag;
    }
    @Override
    public void run() {
        if (flag) {
            synchronized (MyLock.objA) {
                System.out.println("if objA");
                synchronized (MyLock.objB) {
                    System.out.println("if objB");
                }
            }
        } else {
            synchronized (MyLock.objB) {
                System.out.println("else objB");
                synchronized (MyLock.objA) {
                    System.out.println("else objA");
                }
            }
        }
    }
}
class MyLock{
    public static Object objA = "objA";

    public static Object objB = "objB";
}

```

12.如何确保N个线程可以访问N个资源同时又不导致死锁？  
使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。

13.Java集合类框架的基本接口有哪些？  
Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：
* Collection：代表一组对象，每一个对象都是它的子元素。
* Set：不包含重复元素的Collection。
* List：有顺序的collection，并且可以包含重复元素。
* Map：可以把键(key)映射到值(value)的对象，键不能重复。

14.什么是迭代器(Iterator)？  
Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素。

15.Iterator和ListIterator的区别是什么？  
下面列出了他们的区别：
* Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。
* Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。
* ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。

16.Java中的HashMap的工作原理是什么？  
Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。

17.HashMap和Hashtable有什么区别？
* HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：
* HashMap允许键和值是null，而Hashtable不允许键或者值是null。
* Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。
* HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。
 一般认为Hashtable是一个遗留的类。

18.数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？  
下面列出了Array和ArrayList的不同点：
* Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。
* Array大小是固定的，ArrayList的大小是动态变化的。
* ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。
* 对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。

19.ArrayList和LinkedList有什么区别？  
ArrayList和LinkedList都实现了List接口，他们有以下的不同点：
* ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素链表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。
* 相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。
* LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。
也可以参考ArrayList vs. LinkedList。

20.如何权衡是使用无序的数组还是有序的数组？  
有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。

21.HashSet和TreeSet有什么区别？  
HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。
另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。

22.Java中垃圾回收有什么目的？什么时候进行垃圾回收？  
垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。

23.如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？  
不会，在下一个垃圾回收周期中，这个对象将是可被回收的。

24、String是最基本的数据类型吗?  
基本数据类型包括byte、int、char、long、float、double、boolean和short。
java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类

25、int 和 Integer 有什么区别  
Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。

26、String 和StringBuffer的区别  
JAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。

27、说出ArrayList,Vector, LinkedList的存储性能和特性  
ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而 Linke dList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。



https://www.boxuegu.com/news/tag-26/  
https://blog.csdn.net/as6757uyy65uy75/article/details/79370686  
https://blog.csdn.net/fhkkkbfgggjk/article/details/84862149  
https://www.cnblogs.com/peke/p/7894685.html  
